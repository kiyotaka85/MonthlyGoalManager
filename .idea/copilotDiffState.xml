<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ablomm/monthlygoalmanager/AddGoalSheet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ablomm/monthlygoalmanager/AddGoalSheet.kt" />
              <option name="originalContent" value="package com.ablomm.monthlygoalmanager&#10;&#10;import android.os.Build&#10;import androidx.annotation.RequiresApi ￥￥import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.ChevronRight&#10;import androidx.compose.material.icons.filled.ExpandLess&#10;import androidx.compose.material.icons.filled.ExpandMore&#10;import androidx.compose.material3.*&#10;import androidx.compose.material.icons.filled.Send&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.focus.FocusRequester&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.focus.focusRequester&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalSoftwareKeyboardController&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.KeyboardCapitalization&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import java.time.YearMonth&#10;import java.util.UUID&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@RequiresApi(Build.VERSION_CODES.O)&#10;@Composable&#10;fun AddGoalSheet(&#10;    viewModel: GoalsViewModel,&#10;    targetMonth: YearMonth,&#10;    onClose: () -&gt; Unit,&#10;    navController: NavController,&#10;    displayOrder: Int&#10;) {&#10;    var goalTitle by remember { mutableStateOf(&quot;&quot;) }&#10;    var targetValueText by remember { mutableStateOf(&quot;&quot;) }&#10;    var startValueText by remember { mutableStateOf(&quot;0&quot;) }&#10;    var unitText by remember { mutableStateOf(&quot;&quot;) }&#10;    var isDecimal by remember { mutableStateOf(false) }&#10;&#10;    val focusRequester = remember { FocusRequester() }&#10;    var showOptions by remember { mutableStateOf(false) }&#10;    var isKeyGoal by remember { mutableStateOf(false) }&#10;    var detailedDescription by remember { mutableStateOf(&quot;&quot;) }&#10;    var celebration by remember { mutableStateOf(&quot;&quot;) }&#10;    val keyboardController = LocalSoftwareKeyboardController.current&#10;&#10;    // フォーカス&#10;    // モーダル表示時にテキストフィールドにフォーカスを当てる&#10;    LaunchedEffect(Unit) {&#10;        focusRequester.requestFocus()&#10;    }&#10;&#10;    // `higherGoals/select` から戻ってきた時に選択された上位目標IDを取得&#10;    val selectedHigherGoalId = navController.currentBackStackEntry&#10;        ?.savedStateHandle&#10;        ?.get&lt;String&gt;(&quot;selected_higher_goal_id&quot;)&#10;        ?.let { UUID.fromString(it) }&#10;&#10;    var selectedHigherGoal by remember { mutableStateOf&lt;HigherGoal?&gt;(null) }&#10;&#10;    // selectedHigherGoalId が変更されたときに上位目標を再取得&#10;    LaunchedEffect(selectedHigherGoalId) {&#10;        selectedHigherGoal = if (selectedHigherGoalId != null) {&#10;            viewModel.getHigherGoalById(selectedHigherGoalId)&#10;        } else {&#10;            null&#10;        }&#10;    }&#10;    // UI&#10;&#10;    // UIの組み立て&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;            .imePadding()&#10;            .imePadding() // キーボード表示時にコンテンツを上に押し上げる&#10;        // ヘッダー&#10;        // --- ヘッダー ---&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    &quot;Add goal&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Set a clear numeric target to track your progress.&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            IconButton(onClick = onClose) { Icon(Icons.Filled.Close, contentDescription = &quot;Close&quot;) }&#10;            IconButton(onClick = onClose) {&#10;                Icon(Icons.Default.Close, contentDescription = &quot;Close&quot;)&#10;            }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // 目標タイトル&#10;            // --- 目標タイトル ---&#10;            OutlinedTextField(&#10;                value = goalTitle,&#10;                onValueChange = { goalTitle = it },&#10;                label = { Text(&quot;Goal name&quot;) },&#10;                placeholder = { Text(&quot;e.g., Read 10 books&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .focusRequester(focusRequester),&#10;                singleLine = true,&#10;                keyboardOptions = KeyboardOptions.Default.copy(&#10;                    capitalization = KeyboardCapitalization.Sentences,&#10;                    imeAction = ImeAction.Next&#10;                ),&#10;                shape = MaterialTheme.shapes.extraLarge,&#10;            )&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;        // 数値設定&#10;            // --- 数値設定（デフォルト表示） ---&#10;            Text(&#10;                text = &quot;Goal metrics&quot;,&#10;                style = MaterialTheme.typography.labelLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        val targetError = targetValueText.isNotBlank() &amp;&amp; targetValueText.toDoubleOrNull() == null&#10;            val targetError = targetValueText.isNotBlank() &amp;&amp; targetValueText.toDoubleOrNull() == null&#10;            val startError = startValueText.isNotBlank() &amp;&amp; startValueText.toDoubleOrNull() == null&#10;            Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {&#10;                OutlinedTextField(&#10;                    value = targetValueText,&#10;                    onValueChange = { targetValueText = it },&#10;                    label = { Text(&quot;Target value&quot;) },&#10;                    placeholder = { Text(if (isDecimal) &quot;e.g., 100.0&quot; else &quot;e.g., 100&quot;) },&#10;                    modifier = Modifier.weight(1f),&#10;                    singleLine = true,&#10;                    isError = targetError,&#10;                    supportingText = {&#10;                        if (targetError) Text(&quot;Enter a valid number&quot;) else Text(&quot;Required&quot;)&#10;                    },&#10;                    keyboardOptions = KeyboardOptions.Default.copy(&#10;                        keyboardType = if (isDecimal) KeyboardType.Decimal else KeyboardType.Number,&#10;                        imeAction = ImeAction.Next&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                OutlinedTextField(&#10;                    value = startValueText,&#10;                    onValueChange = { startValueText = it },&#10;                    label = { Text(&quot;Start value&quot;) },&#10;                    placeholder = { Text(if (isDecimal) &quot;e.g., 0.0&quot; else &quot;e.g., 0&quot;) },&#10;                    modifier = Modifier.weight(1f),&#10;                    singleLine = true,&#10;                    isError = startError,&#10;                    supportingText = {&#10;                        if (startError) Text(&quot;Enter a valid number&quot;) else Text(&quot;Defaults to 0&quot;)&#10;                    },&#10;                    keyboardOptions = KeyboardOptions.Default.copy(&#10;                        keyboardType = if (isDecimal) KeyboardType.Decimal else KeyboardType.Number,&#10;                        imeAction = ImeAction.Next&#10;                    )&#10;                )&#10;            }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {&#10;            Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {&#10;                OutlinedTextField(&#10;                    value = unitText,&#10;                    onValueChange = { unitText = it },&#10;                    label = { Text(&quot;Unit&quot;) },&#10;                    placeholder = { Text(&quot;e.g., %, km, pages&quot;) },&#10;                    modifier = Modifier.weight(1f),&#10;                    singleLine = true,&#10;                    keyboardOptions = KeyboardOptions.Default.copy(&#10;                        imeAction = ImeAction.Done&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&quot;Allow decimals&quot;)&#10;                        Text(&#10;                            text = &quot;Use decimal numbers like 2.5&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(checked = isDecimal, onCheckedChange = { isDecimal = it })&#10;                }&#10;            }&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        // 追加ボタン&#10;            // --- オプション（折りたたみ） ---&#10;            OutlinedCard(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.outlinedCardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;            ) {&#10;                val optionsSummary = buildString {&#10;                    append(&quot;Higher goal: &quot;)&#10;                    append(selectedHigherGoal?.title ?: &quot;None&quot;)&#10;                    if (isKeyGoal) append(&quot; · Key goal&quot;)&#10;                    if (detailedDescription.isNotBlank()) append(&quot; · Description&quot;)&#10;                    if (celebration.isNotBlank()) append(&quot; · Celebration&quot;)&#10;                }&#10;                ListItem(&#10;                    headlineContent = { Text(&quot;Options&quot;) },&#10;                    supportingContent = { Text(optionsSummary, color = MaterialTheme.colorScheme.onSurfaceVariant) },&#10;                    trailingContent = {&#10;                        Icon(&#10;                            imageVector = if (showOptions) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,&#10;                            contentDescription = if (showOptions) &quot;Collapse&quot; else &quot;Expand&quot;&#10;                        )&#10;                    },&#10;                    modifier = Modifier.clickable { showOptions = !showOptions }&#10;                )&#10;&#10;                if (showOptions) {&#10;                    Divider()&#10;                    // 上位目標の選択&#10;                    Card(&#10;                        onClick = {&#10;                            navController.navigate(&quot;higherGoals/select&quot;)&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(12.dp),&#10;                        shape = MaterialTheme.shapes.medium,&#10;                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 16.dp, vertical = 12.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(32.dp)&#10;                                        .clip(CircleShape)&#10;                                        .background(&#10;                                            if (selectedHigherGoal != null) MaterialTheme.colorScheme.secondaryContainer&#10;                                            else Color.Transparent&#10;                                        ),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    if (selectedHigherGoal != null) {&#10;                                        Icon(&#10;                                            imageVector = GoalIcons.getIconByName(selectedHigherGoal!!.icon),&#10;                                            contentDescription = selectedHigherGoal!!.title,&#10;                                            modifier = Modifier.size(20.dp),&#10;                                            tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                                        )&#10;                                    }&#10;                                }&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                                Column {&#10;                                    Text(&quot;Higher Goal&quot;, style = MaterialTheme.typography.labelMedium)&#10;                                    Text(&#10;                                        selectedHigherGoal?.title ?: &quot;Not Selected&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = if (selectedHigherGoal != null) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                }&#10;                            }&#10;                            Icon(Icons.Default.ChevronRight, contentDescription = &quot;Select Higher Goal&quot;)&#10;                        }&#10;                    }&#10;&#10;                    // キー目標&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#10;                    ) {&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&quot;Key goal&quot;)&#10;                            Text(&#10;                                text = &quot;Mark as a key priority for this month&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                        Switch(checked = isKeyGoal, onCheckedChange = { isKeyGoal = it })&#10;                    }&#10;&#10;                    // 詳細説明&#10;                    OutlinedTextField(&#10;                        value = detailedDescription,&#10;                        onValueChange = { detailedDescription = it },&#10;                        label = { Text(&quot;Description (optional)&quot;) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp),&#10;                        minLines = 2&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // ご褒美&#10;                    OutlinedTextField(&#10;                        value = celebration,&#10;                        onValueChange = { celebration = it },&#10;                        label = { Text(&quot;Celebration (optional)&quot;) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp),&#10;                        singleLine = true&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // 追加ボタン（送信）&#10;            val addEnabled = goalTitle.isNotBlank() &amp;&amp; targetValueText.toDoubleOrNull() != null&#10;            Button(&#10;                onClick = {&#10;                    if (addEnabled) {&#10;                        val targetVal = targetValueText.toDoubleOrNull() ?: 0.0&#10;                        val startVal = startValueText.toDoubleOrNull() ?: 0.0&#10;                        addNewGoal(&#10;                            viewModel = viewModel,&#10;                            title = goalTitle,&#10;                            targetMonth = targetMonth,&#10;                            higherGoalId = selectedHigherGoalId,&#10;                            displayOrder = displayOrder,&#10;                            targetNumericValue = targetVal,&#10;                            startNumericValue = startVal,&#10;                            unit = unitText,&#10;                            isDecimal = isDecimal,&#10;                            isKeyGoal = isKeyGoal,&#10;                            detailedDescription = detailedDescription.ifBlank { null },&#10;                            celebration = celebration.ifBlank { null }&#10;                        )&#10;                        goalTitle = &quot;&quot;&#10;                        targetValueText = &quot;&quot;&#10;                        startValueText = &quot;0&quot;&#10;                        unitText = &quot;&quot;&#10;                        isDecimal = false&#10;                        isKeyGoal = false&#10;                        detailedDescription = &quot;&quot;&#10;                        celebration = &quot;&quot;&#10;                        onClose()&#10;                    }&#10;                },&#10;                enabled = addEnabled,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(48.dp)&#10;                    .clip(MaterialTheme.shapes.large)&#10;            ) {&#10;                Icon(Icons.Default.Send, contentDescription = null)&#10;                Spacer(Modifier.width(8.dp))&#10;                Text(&quot;Add goal&quot;)&#10;            }&#10;}&#10;&#10;private fun addNewGoal(&#10;    private fun addNewGoal(&#10;        viewModel: GoalsViewModel,&#10;        title: String,&#10;        targetMonth: YearMonth,&#10;        higherGoalId: UUID?,&#10;        displayOrder: Int,&#10;        targetNumericValue: Double,&#10;        startNumericValue: Double,&#10;        unit: String,&#10;        isDecimal: Boolean,&#10;        isKeyGoal: Boolean = false,&#10;        detailedDescription: String? = null,&#10;        celebration: String? = null&#10;    ) {&#10;        val computedMonth = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            targetMonth.year * 1000 + targetMonth.monthValue&#10;        } else {&#10;            java.util.Calendar.getInstance().let { cal -&gt;&#10;                cal.get(java.util.Calendar.YEAR) * 1000 + (cal.get(java.util.Calendar.MONTH) + 1)&#10;            }&#10;        }&#10;        val newGoal = GoalItem(&#10;            title = title,&#10;            detailedDescription = detailedDescription,&#10;            targetMonth = computedMonth,&#10;            targetNumericValue = targetNumericValue,&#10;            startNumericValue = startNumericValue,&#10;            currentNumericValue = startNumericValue, // 初期現在値は開始値に合わせる&#10;            unit = unit,&#10;            isKeyGoal = isKeyGoal,&#10;            displayOrder = displayOrder,&#10;            higherGoalId = higherGoalId,&#10;            celebration = celebration,&#10;            isDecimal = isDecimal&#10;        )&#10;        viewModel.addGoalItem(newGoal)&#10;    }&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.ablomm.monthlygoalmanager&#10;&#10;import android.os.Build&#10;import androidx.annotation.RequiresApi&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.focus.FocusRequester&#10;import androidx.compose.ui.focus.focusRequester&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.KeyboardCapitalization&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.draw.clip&#10;import androidx.navigation.NavController&#10;import java.time.YearMonth&#10;import java.util.UUID&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@RequiresApi(Build.VERSION_CODES.O)&#10;@Composable&#10;fun AddGoalSheet(&#10;    viewModel: GoalsViewModel,&#10;    targetMonth: YearMonth,&#10;    onClose: () -&gt; Unit,&#10;    navController: NavController,&#10;    displayOrder: Int&#10;) {&#10;    var goalTitle by remember { mutableStateOf(&quot;&quot;) }&#10;    var targetValueText by remember { mutableStateOf(&quot;&quot;) }&#10;    var startValueText by remember { mutableStateOf(&quot;0&quot;) }&#10;    var unitText by remember { mutableStateOf(&quot;&quot;) }&#10;    var isDecimal by remember { mutableStateOf(false) }&#10;&#10;    val focusRequester = remember { FocusRequester() }&#10;&#10;    // フォーカス&#10;    LaunchedEffect(Unit) { focusRequester.requestFocus() }&#10;&#10;    // UI&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;            .imePadding()&#10;    ) {&#10;        // ヘッダー&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    &quot;Add goal&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Set a clear numeric target to track your progress.&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            IconButton(onClick = onClose) { Icon(Icons.Filled.Close, contentDescription = &quot;Close&quot;) }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // 目標タイトル&#10;        OutlinedTextField(&#10;            value = goalTitle,&#10;            onValueChange = { goalTitle = it },&#10;            label = { Text(&quot;Goal name&quot;) },&#10;            placeholder = { Text(&quot;e.g., Read 10 books&quot;) },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .focusRequester(focusRequester),&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions.Default.copy(&#10;                capitalization = KeyboardCapitalization.Sentences,&#10;                imeAction = ImeAction.Next&#10;            ),&#10;            shape = MaterialTheme.shapes.extraLarge,&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // 数値設定&#10;        Text(&#10;            text = &quot;Goal metrics&quot;,&#10;            style = MaterialTheme.typography.labelLarge,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        val targetError = targetValueText.isNotBlank() &amp;&amp; targetValueText.toDoubleOrNull() == null&#10;        val startError = startValueText.isNotBlank() &amp;&amp; startValueText.toDoubleOrNull() == null&#10;        Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {&#10;            OutlinedTextField(&#10;                value = targetValueText,&#10;                onValueChange = { targetValueText = it },&#10;                label = { Text(&quot;Target value&quot;) },&#10;                placeholder = { Text(if (isDecimal) &quot;e.g., 100.0&quot; else &quot;e.g., 100&quot;) },&#10;                modifier = Modifier.weight(1f),&#10;                singleLine = true,&#10;                isError = targetError,&#10;                supportingText = { if (targetError) Text(&quot;Enter a valid number&quot;) else Text(&quot;Required&quot;) },&#10;                keyboardOptions = KeyboardOptions.Default.copy(&#10;                    keyboardType = if (isDecimal) KeyboardType.Decimal else KeyboardType.Number,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            OutlinedTextField(&#10;                value = startValueText,&#10;                onValueChange = { startValueText = it },&#10;                label = { Text(&quot;Start value&quot;) },&#10;                placeholder = { Text(if (isDecimal) &quot;e.g., 0.0&quot; else &quot;e.g., 0&quot;) },&#10;                modifier = Modifier.weight(1f),&#10;                singleLine = true,&#10;                isError = startError,&#10;                supportingText = { if (startError) Text(&quot;Enter a valid number&quot;) else Text(&quot;Defaults to 0&quot;) },&#10;                keyboardOptions = KeyboardOptions.Default.copy(&#10;                    keyboardType = if (isDecimal) KeyboardType.Decimal else KeyboardType.Number,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {&#10;            OutlinedTextField(&#10;                value = unitText,&#10;                onValueChange = { unitText = it },&#10;                label = { Text(&quot;Unit&quot;) },&#10;                placeholder = { Text(&quot;e.g., %, km, pages&quot;) },&#10;                modifier = Modifier.weight(1f),&#10;                singleLine = true,&#10;                keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.weight(1f)) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&quot;Allow decimals&quot;)&#10;                    Text(&#10;                        text = &quot;Use decimal numbers like 2.5&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                Switch(checked = isDecimal, onCheckedChange = { isDecimal = it })&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 追加ボタン&#10;        val addEnabled = goalTitle.isNotBlank() &amp;&amp; targetValueText.toDoubleOrNull() != null&#10;        Button(&#10;            onClick = {&#10;                if (addEnabled) {&#10;                    val targetVal = targetValueText.toDoubleOrNull() ?: 0.0&#10;                    val startVal = startValueText.toDoubleOrNull() ?: 0.0&#10;                    addNewGoal(&#10;                        viewModel = viewModel,&#10;                        title = goalTitle,&#10;                        targetMonth = targetMonth,&#10;                        higherGoalId = null, // removed in MVP&#10;                        displayOrder = displayOrder,&#10;                        targetNumericValue = targetVal,&#10;                        startNumericValue = startVal,&#10;                        unit = unitText,&#10;                        isDecimal = isDecimal,&#10;                        isKeyGoal = false, // removed in MVP&#10;                        detailedDescription = null, // removed in MVP&#10;                        celebration = null // removed in MVP&#10;                    )&#10;                    goalTitle = &quot;&quot;&#10;                    targetValueText = &quot;&quot;&#10;                    startValueText = &quot;0&quot;&#10;                    unitText = &quot;&quot;&#10;                    isDecimal = false&#10;                    onClose()&#10;                }&#10;            },&#10;            enabled = addEnabled,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp)&#10;                .clip(MaterialTheme.shapes.large)&#10;        ) {&#10;            Icon(Icons.AutoMirrored.Filled.Send, contentDescription = null)&#10;            Spacer(Modifier.width(8.dp))&#10;            Text(&quot;Add goal&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;private fun addNewGoal(&#10;    viewModel: GoalsViewModel,&#10;    title: String,&#10;    targetMonth: YearMonth,&#10;    higherGoalId: UUID?,&#10;    displayOrder: Int,&#10;    targetNumericValue: Double,&#10;    startNumericValue: Double,&#10;    unit: String,&#10;    isDecimal: Boolean,&#10;    isKeyGoal: Boolean = false,&#10;    detailedDescription: String? = null,&#10;    celebration: String? = null&#10;) {&#10;    val computedMonth = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;        targetMonth.year * 1000 + targetMonth.monthValue&#10;    } else {&#10;        java.util.Calendar.getInstance().let { cal -&gt;&#10;            cal.get(java.util.Calendar.YEAR) * 1000 + (cal.get(java.util.Calendar.MONTH) + 1)&#10;        }&#10;    }&#10;    val newGoal = GoalItem(&#10;        title = title,&#10;        detailedDescription = detailedDescription,&#10;        targetMonth = computedMonth,&#10;        targetNumericValue = targetNumericValue,&#10;        startNumericValue = startNumericValue,&#10;        currentNumericValue = startNumericValue,&#10;        unit = unit,&#10;        isKeyGoal = isKeyGoal,&#10;        displayOrder = displayOrder,&#10;        higherGoalId = higherGoalId,&#10;        celebration = celebration,&#10;        isDecimal = isDecimal&#10;    )&#10;    viewModel.addGoalItem(newGoal)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>