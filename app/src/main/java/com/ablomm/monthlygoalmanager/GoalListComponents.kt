package com.ablomm.monthlygoalmanager

import androidx.compose.animation.core.*
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectHorizontalDragGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material.icons.automirrored.filled.ArrowRightAlt
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.zIndex
import androidx.navigation.NavHostController
import kotlin.math.abs
import kotlin.math.roundToInt

// Êñ∞„Åó„ÅÑÁõÆÊ®ô„Ç´„Éº„Éâ„Éá„Ç∂„Ç§ÔøΩÔøΩÔøΩ
@Composable
fun GoalCard(
    goalItem: GoalItem,
    higherGoal: HigherGoal?,
    navController: NavHostController,
    viewModel: GoalsViewModel,
    modifier: Modifier = Modifier
) {
    // „Åì„ÅÆ„Ç´„Éº„Éâ„Å´Á¥ê„Å•„Åè„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥ÔøΩÔøΩÊ≠¥„ÇíÂèñÂæó
    val checkIns by viewModel.getCheckInsForGoal(goalItem.id).collectAsState(initial = emptyList())

    var offsetX by remember { mutableStateOf(0f) }
    val animatedOffsetX by animateFloatAsState(
        targetValue = offsetX,
        animationSpec = spring(),
        label = "offset_x_animation"
    )
    val swipeThresholdPx = with(androidx.compose.ui.platform.LocalDensity.current) { 120.dp.toPx() }

    Box(
        modifier = modifier
            .fillMaxWidth()
            // .clip(RoundedCornerShape(8.dp)) // Card„Åå„ÇØ„É™„ÉÉ„Éó„Åô„Çã„ÅÆ„Åß„Åì„Åì„ÅØ‰∏çË¶Å
    ) {
        // ËÉåÊôØ„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥ÔºàÁ∑®ÈõÜ„Éª„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥Ôºâ
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .matchParentSize() // Box„ÅÆ„Çµ„Ç§„Ç∫„Å´Âêà„Çè„Åõ„Çã
                .clip(RoundedCornerShape(8.dp)), // ËÉåÊôØËá™‰Ωì„Çí„ÇØ„É™„ÉÉ„Éó
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .fillMaxHeight()
                    .width(animatedOffsetX.coerceAtLeast(0f).dp)
                    .background(MaterialTheme.colorScheme.primaryContainer),
                contentAlignment = Alignment.CenterStart
            ) {
                if(animatedOffsetX > 20.dp.value) {
                    Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(start = 16.dp)) {
                        Icon(Icons.Default.Edit, "Á∑®ÈõÜ", tint = MaterialTheme.colorScheme.primary)
                        Spacer(Modifier.width(8.dp))
                        Text("Á∑®ÈõÜ", color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.Bold)
                    }
                }
            }
            Box(
                modifier = Modifier
                    .fillMaxHeight()
                    .width(abs(animatedOffsetX.coerceAtMost(0f)).dp)
                    .background(Color(0xFFE8F5E9)),
                contentAlignment = Alignment.CenterEnd
            ) {
                if(animatedOffsetX < -20.dp.value) {
                    Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(end = 16.dp)) {
                        Text("„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥", color = Color(0xFF388E3C), fontWeight = FontWeight.Bold)
                        Spacer(Modifier.width(8.dp))
                        Icon(Icons.Default.Check, "„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥", tint = Color(0xFF388E3C))
                    }
                }
            }
        }

        // „Ç´„Éº„ÉâÊú¨‰Ωì„ÇíCard„Ç≥„É≥„Éù„Éº„Ç∂„Éñ„É´„ÅßÂõ≤„ÇÄ„Çà„ÅÜ„Å´‰øÆÊ≠£
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .offset(x = animatedOffsetX.dp)
                .border( // Êû†Á∑ö„ÇíËøΩÂä†
                    width = 1.dp,
                    color = MaterialTheme.colorScheme.outline.copy(alpha = 0.5f), // Â∞ë„ÅóËñÑ„ÇÅ„ÅÆËâ≤
                    shape = RoundedCornerShape(8.dp)
                )
                .clip(RoundedCornerShape(8.dp)) // Êû†Á∑ö„ÅÆÂÜÖÂÅ¥„Çí„ÇØ„É™„ÉÉ„Éó
                .background(MaterialTheme.colorScheme.surface) // „Ç´„Éº„Éâ„ÅÆËÉåÊôØËâ≤
                .pointerInput(Unit) {
                    detectHorizontalDragGestures(
                        onDragEnd = {
                            when {
                                offsetX > swipeThresholdPx -> navController.navigate("goalEdit/${goalItem.id}")
                                offsetX < -swipeThresholdPx -> navController.navigate("checkIn/${goalItem.id}")
                            }
                            offsetX = 0f
                        }
                    ) { _, dragAmount ->
                        offsetX = (offsetX + dragAmount).coerceIn(-swipeThresholdPx * 1.5f, swipeThresholdPx * 1.5f)
                    }
                }
                .clickable {
                    if (abs(offsetX) < 20f) navController.navigate("goalDetail/${goalItem.id}")
                }
        ) {
            Row {
                // Â∑¶„ÅÆ„Ç´„É©„Éº„Éê„Éº
                Box(
                    modifier = Modifier
                        .fillMaxHeight()
                        .width(6.dp)
                        .background(
                            color = higherGoal?.color?.let { Color(android.graphics.Color.parseColor(it)) }
                                ?: Color.Transparent
                        )
                )

                // „Ç´„Éº„Éâ„ÅÆ‰∏≠Ë∫´
                Column(
                    modifier = Modifier
                        .padding(horizontal = 16.dp, vertical = 12.dp)
                        .fillMaxWidth(),
                    verticalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    // 1Ë°åÁõÆÔºö„Çø„Ç§„Éà„É´
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        if (goalItem.isKeyGoal) {
                            Text("üîë ", style = MaterialTheme.typography.titleMedium)
                        }
                        Text(
                            text = goalItem.title,
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis
                        )
                    }

                    // 2Ë°åÁõÆÔºöÈÄ≤Êçó„ÉÜ„Ç≠„Çπ„Éà
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        Text(
                            text = formatNumber(goalItem.startNumericValue, goalItem.isDecimal),
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                        Icon(Icons.AutoMirrored.Filled.ArrowRightAlt, contentDescription = "‚Üí", modifier = Modifier.size(16.dp))
                        Text(
                            text = formatNumber(goalItem.currentNumericValue, goalItem.isDecimal),
                            style = MaterialTheme.typography.bodySmall,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.primary
                        )
                        Icon(Icons.AutoMirrored.Filled.ArrowRightAlt, contentDescription = "‚Üí", modifier = Modifier.size(16.dp))
                        Text(
                            text = "üéØ ${formatNumber(goalItem.targetNumericValue, goalItem.isDecimal)} ${goalItem.unit}",
                            style = MaterialTheme.typography.bodySmall,
                            fontWeight = FontWeight.Bold
                        )
                    }

                    // 3Ë°åÁõÆÔºöÈÄ≤Êçó„Éê„Éº
                    StackedBlockProgressBar(
                        goal = goalItem,
                        checkInItems = checkIns
                    )
                }
            }
        }
    }
}

// Êñ∞„Åó„ÅèËøΩÂä†„Åô„Çã„Ç´„Çπ„Çø„É†ÈÄ≤Êçó„Éê„Éº
@Composable
fun GoalProgressBarWithCheckIns(
    goal: GoalItem,
    checkInItems: List<CheckInItem>
) {
    val progress = calculateProgressPrecise(
        startValue = goal.startNumericValue,
        targetValue = goal.targetNumericValue,
        currentValue = goal.currentNumericValue
    )
    val progressFraction = (progress / 100f).toFloat().coerceIn(0f, 1f)

    val progressColor = when {
        progress >= 100 -> Color(0xFF4CAF50) // Green
        progress >= 75 -> MaterialTheme.colorScheme.primary
        progress >= 50 -> Color(0xFFFFC107) // Amber
        else -> MaterialTheme.colorScheme.error
    }

    // „ÉÜ„Éº„Éû„ÅÆËâ≤„ÇíCanvasÂ§ñ„ÅßÂèñÂæó
    val trackColor = MaterialTheme.colorScheme.surfaceVariant

    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(16.dp), // È´ò„Åï„ÇíÁ¢∫‰øù
        contentAlignment = Alignment.CenterStart
    ) {
        Canvas(modifier = Modifier.fillMaxSize()) {
            val strokeWidth = 8.dp.toPx()
            val yCenter = size.height / 2

            // 1. ËÉåÊôØ„ÅÆ„Éà„É©„ÉÉ„ÇØ
            drawLine(
                color = trackColor,
                start = Offset(0f, yCenter),
                end = Offset(size.width, yCenter),
                strokeWidth = strokeWidth,
                cap = StrokeCap.Round
            )

            // 2. ÁèæÂú®„ÅÆÈÄ≤Êçó
            if (progressFraction > 0) {
                drawLine(
                    color = progressColor,
                    start = Offset(0f, yCenter),
                    end = Offset(size.width * progressFraction, yCenter),
                    strokeWidth = strokeWidth,
                    cap = StrokeCap.Round
                )
            }

            // 3. „ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥Âú∞ÁÇπ„ÅÆ„Éâ„ÉÉ„Éà
            checkInItems.forEach { checkIn ->
                val checkInProgressFraction = (checkIn.progressPercent / 100f).coerceIn(0f, 1f)
                val dotX = size.width * checkInProgressFraction

                // „Éâ„ÉÉ„Éà„ÅÆÂ§ñÊû†ÔºàÂ∞ë„ÅóÂ§ß„Åç„Åè„Åó„Å¶ÁõÆÁ´ã„Åü„Åõ„ÇãÔºâ
                drawCircle(
                    color = Color.White,
                    radius = 4.dp.toPx(),
                    center = Offset(dotX, yCenter)
                )
                // „Éâ„ÉÉ„ÉàÊú¨‰Ωì
                drawCircle(
                    color = progressColor.copy(alpha = 0.8f),
                    radius = 3.dp.toPx(),
                    center = Offset(dotX, yCenter)
                )
            }
        }
    }
}

// Á©ç„Åø‰∏ä„ÅíÂºè„Éñ„É≠„ÉÉ„ÇØÈÄ≤Êçó„Éê„Éº - Èù©Êñ∞ÁöÑ„Å™Âä†ÁÇπÊ≥ï„Éá„Ç∂„Ç§„É≥
@Composable
fun StackedBlockProgressBar(
    goal: GoalItem,
    checkInItems: List<CheckInItem>
) {
    // „ÉÜ„Éº„Éû„Åã„ÇâËâ≤„ÇíÂèñÂæó
    val trackColor = MaterialTheme.colorScheme.surfaceVariant
    val primaryColor = MaterialTheme.colorScheme.primary
    val goalLineColor = MaterialTheme.colorScheme.tertiary
    val blockBorderColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f) // „Çà„ÇäÊøÉ„ÅÑÊû†Á∑öËâ≤„Å´Â§âÊõ¥

    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(32.dp), // È´ò„Åï„Çí2ÂÄç„Å´Ôºà16dp ‚Üí 32dpÔºâ
        contentAlignment = Alignment.CenterStart
    ) {
        Canvas(modifier = Modifier.fillMaxSize()) {
            val strokeWidth = 16.dp.toPx() // ÈÄ≤Êçó„Éê„Éº„ÅÆÂ§™„Åï„Çí2ÂÄç„Å´Ôºà8dp ‚Üí 16dpÔºâ
            val yCenter = size.height / 2f
            val borderWidth = 2.dp.toPx() // Êû†Á∑ö„ÅÆÂ§™„Åï„ÅØ„Åù„ÅÆ„Åæ„Åæ

            // 1. ËÉåÊôØ„ÅÆ„Éà„É©„ÉÉ„ÇØ
            drawLine(
                color = trackColor,
                start = Offset(0f, yCenter),
                end = Offset(size.width, yCenter),
                strokeWidth = strokeWidth,
                cap = StrokeCap.Round
            )

            // 2. „ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥„Éñ„É≠„ÉÉ„ÇØ„ÇíÁ©ç„Åø‰∏ä„Åí„Çã
            var lastProgressFraction = 0f
            // „ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥Êó•ÊôÇ„Åß„ÇΩ„Éº„Éà„Åó„Å¶„ÄÅÂè§„ÅÑ„ÇÇ„ÅÆ„Åã„ÇâÈ†Ü„Å´ÊèèÁîª
            val sortedCheckIns = checkInItems.sortedBy { it.checkInDate }

            sortedCheckIns.forEachIndexed { index, checkIn ->
                val currentProgressFraction = (checkIn.progressPercent / 100f).coerceIn(0f, 1f)

                // ÂâçÂõû„ÅÆÈÄ≤Êçó„Åã„Çâ„ÅÆÂ∑ÆÂàÜ„Éñ„É≠„ÉÉ„ÇØ„ÇíÊèèÁîª
                if (currentProgressFraction > lastProgressFraction) {
                    val blockStartX = size.width * lastProgressFraction
                    val blockEndX = size.width * currentProgressFraction
                    val blockWidth = blockEndX - blockStartX

                    // „Éñ„É≠„ÉÉ„ÇØ„ÅåÂçÅÂàÜ„Å™ÂπÖ„ÇíÊåÅ„Å§Â†¥Âêà„ÅÆ„ÅøÊû†Á∑ö„ÇíÊèèÁîª
                    if (blockWidth > 6.dp.toPx()) { // ÈñæÂÄ§„ÇíÂ∞ë„Åó‰∏ä„Åí„Çã
                        // „Éñ„É≠„ÉÉ„ÇØ„Åî„Å®„Å´Ëâ≤„ÇíÂ∞ë„ÅóÂ§â„Åà„Å¶„ÄÅÂå∫Âàá„Çä„ÇíË°®Áèæ
                        val blockColor = primaryColor.copy(alpha = (0.6f + (index % 5) * 0.08f).coerceIn(0.6f, 1.0f))

                        // „Éñ„É≠„ÉÉ„ÇØÊú¨‰Ωì„ÇíÊèèÁîª
                        drawLine(
                            color = blockColor,
                            start = Offset(blockStartX, yCenter),
                            end = Offset(blockEndX, yCenter),
                            strokeWidth = strokeWidth
                            // cap„ÅØ„Éñ„É≠„ÉÉ„ÇØÊÑü„ÇíÂá∫„Åô„Åü„ÇÅ„Å´ButtÔºà„Éá„Éï„Ç©„É´„ÉàÔºâ„ÅÆ„Åæ„Åæ
                        )

                        // ÂõõËßíÂΩ¢„ÅÆÊû†Á∑ö„ÇíÊèèÁîªÔºà‰∏ä‰∏ãÂ∑¶Âè≥„Åô„Åπ„Å¶Ôºâ
                        val blockTop = yCenter - strokeWidth / 2
                        val blockBottom = yCenter + strokeWidth / 2

                        // ‰∏äËæ∫
                        drawLine(
                            color = blockBorderColor,
                            start = Offset(blockStartX, blockTop),
                            end = Offset(blockEndX, blockTop),
                            strokeWidth = borderWidth
                        )

                        // ‰∏ãËæ∫
                        drawLine(
                            color = blockBorderColor,
                            start = Offset(blockStartX, blockBottom),
                            end = Offset(blockEndX, blockBottom),
                            strokeWidth = borderWidth
                        )

                        // Â∑¶Ëæ∫ÔºàÊúÄÂàù„ÅÆ„Éñ„É≠„ÉÉ„ÇØ‰ª•Â§ñ„ÅØÈáçË§á„ÇíÈÅø„Åë„Çã„Åü„ÇÅÊèèÁîª„Åó„Å™„ÅÑÔºâ
                        if (index == 0) {
                            drawLine(
                                color = blockBorderColor,
                                start = Offset(blockStartX, blockTop),
                                end = Offset(blockStartX, blockBottom),
                                strokeWidth = borderWidth
                            )
                        }

                        // Âè≥Ëæ∫
                        drawLine(
                            color = blockBorderColor,
                            start = Offset(blockEndX, blockTop),
                            end = Offset(blockEndX, blockBottom),
                            strokeWidth = borderWidth
                        )
                    } else {
                        // ÂπÖ„ÅåÁã≠„ÅÑÂ†¥Âêà„ÅØÊû†Á∑ö„Å™„Åó„ÅßÊèèÁîª
                        val blockColor = primaryColor.copy(alpha = (0.6f + (index % 5) * 0.08f).coerceIn(0.6f, 1.0f))
                        drawLine(
                            color = blockColor,
                            start = Offset(blockStartX, yCenter),
                            end = Offset(blockEndX, yCenter),
                            strokeWidth = strokeWidth
                        )
                    }
                }
                lastProgressFraction = currentProgressFraction
            }

            // 3. üéØ ÁõÆÊ®ôÂú∞ÁÇπ„ÅÆ„Éû„Éº„Ç´„Éº
            val goalMarkerX = size.width
            drawLine(
                color = goalLineColor,
                start = Offset(goalMarkerX, yCenter - 12.dp.toPx()), // „Éû„Éº„Ç´„Éº„ÇÇÂ§™„ÅÑ„Éê„Éº„Å´Âêà„Çè„Åõ„Å¶Ë™øÊï¥
                end = Offset(goalMarkerX, yCenter + 12.dp.toPx()),
                strokeWidth = 3.dp.toPx() // „Éû„Éº„Ç´„Éº„ÅÆÁ∑ö„ÇÇÂ∞ë„ÅóÂ§™„Åè
            )
        }
    }
}

// ÔøΩÔøΩÂÄ§„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆ„Éò„É´„Éë„ÉºÈñ¢Êï∞
private fun formatNumber(value: Double, isDecimal: Boolean): String {
    if (!isDecimal && value % 1.0 == 0.0) {
        return value.toInt().toString()
    }
    // Â∞èÊï∞ÁÇπ‰ª•‰∏ã1Ê°Å„Åß„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    return String.format("%.1f", value)
}

// Á≤æÂØÜ„Å™ÈÄ≤ÊçóÁéáË®àÁÆó„ÅÆ„Éò„É´„ÉëÔøΩÔøΩÈñ¢Êï∞
private fun calculateProgressPrecise(
    startValue: Double,
    targetValue: Double,
    currentValue: Double
): Double {
    val range = targetValue - startValue
    val progressInRange = currentValue - startValue

    return if (range != 0.0) {
        (progressInRange / range * 100).coerceAtLeast(0.0)
    } else {
        if (currentValue >= targetValue) 100.0 else 0.0
    }
}

// ÂÖ±ÈÄö„ÅÆÈÄ≤ÊçóË°®Á§∫„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
@Composable
fun GoalProgressIndicator(goal: GoalItem) {
    // Á≤æÂØÜ„Å™ÈÄ≤ÊçóÁéá„ÇíË®àÁÆó
    val preciseProgress = calculateProgressPrecise(
        goal.startNumericValue,
        goal.targetNumericValue,
        goal.currentNumericValue
    )

    Column(modifier = Modifier.fillMaxWidth()) {
        // 1. „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº
        LinearProgressIndicator(
            progress = { (preciseProgress / 100f).toFloat() },
            modifier = Modifier
                .fillMaxWidth()
                .height(8.dp)
                .clip(RoundedCornerShape(4.dp)),
            color = when {
                preciseProgress >= 100 -> Color(0xFF4CAF50)
                preciseProgress >= 75 -> MaterialTheme.colorScheme.primary
                preciseProgress >= 50 -> Color(0xFFFF9800)
                else -> Color(0xFFF44336)
            },
            trackColor = MaterialTheme.colorScheme.surfaceVariant
        )

        Spacer(modifier = Modifier.height(4.dp))

        // 2. ÈñãÂßãÂÄ§„Å®ÁõÆÊ®ôÂÄ§„ÅÆ„É©„Éô„É´
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = if (goal.isDecimal) "${String.format("%.1f", goal.startNumericValue)} ${goal.unit}"
                       else "${goal.startNumericValue.toInt()} ${goal.unit}",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            Text(
                text = if (goal.isDecimal) "${String.format("%.1f", goal.targetNumericValue)} ${goal.unit}"
                       else "${goal.targetNumericValue.toInt()} ${goal.unit}",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }

        Spacer(modifier = Modifier.height(4.dp))

        // 3. ÁèæÂú®ÂÄ§„Å®ÈÄ≤ÊçóÁéá
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            val currentValueText = if (goal.isDecimal) "${String.format("%.1f", goal.currentNumericValue)} ${goal.unit}"
                                  else "${goal.currentNumericValue.toInt()} ${goal.unit}"

            Text(
                text = "ÁèæÂú®: $currentValueText (${formatProgressPercentage(preciseProgress)}%)",
                style = MaterialTheme.typography.bodyMedium,
                fontWeight = FontWeight.Medium,
                color = when {
                    preciseProgress >= 100 -> Color(0xFF4CAF50)
                    preciseProgress >= 75 -> MaterialTheme.colorScheme.primary
                    preciseProgress >= 50 -> Color(0xFFFF9800)
                    else -> Color(0xFFF44336)
                }
            )
        }
    }
}

/**
 * Âêπ„ÅçÂá∫„Åó‰ªò„Åç„ÅÆÈÄ≤Êçó„Ç§„É≥„Ç∏„Ç±„Éº„Çø„ÄÇ
 * ÈÄ≤ÊçóÁéá„Å´Âøú„ÅòÔøΩÔøΩÔøΩÂêπ„ÅçÂá∫„Åó„ÅåÁßªÂãï„Åó„Åæ„Åô„ÄÇ
 */
@Composable
fun GoalProgressIndicatorWithBubble(goal: GoalItem) {
    // 1. start, target, current„ÅÆÂÄ§„Åã„ÇâÁ≤æÂØÜ„Å™ÈÄ≤ÊçóÁéá(Double)„ÇíË®àÁÆó
    val preciseProgress = calculateProgressPrecise(
        startValue = goal.startNumericValue,
        targetValue = goal.targetNumericValue,
        currentValue = goal.currentNumericValue
    )
    // 2. ÈÄ≤ÊçóÁéá„Çí0.0„Äú1.0„ÅÆÈñì„ÅÆFloat„Å´Â§âÊèõ
    val progressFraction = (preciseProgress / 100.0).toFloat().coerceIn(0f, 1f)

    // 3. Ë°®Á§∫Áî®„ÅÆÈÄ≤ÊçóÁéá„ÉÜ„Ç≠„Çπ„Éà„ÇíÁîüÊàêÔºàÂ∞èÊï∞ÁÇπ‰ª•‰∏ã„ÇíÂõõÊç®‰∫îÂÖ•Ôºâ
    val progressText = "${preciseProgress.roundToInt()}%"

    // BoxWithConstraints„Åß„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆÊúÄÂ§ßÂπÖ„ÇíÂèñÂæó„Åó„ÄÅÂãïÁöÑ„Å™ÈÖçÁΩÆ„ÇíÂèØËÉΩ„Å´„Åô„Çã
    BoxWithConstraints(
        modifier = Modifier
            .fillMaxWidth()
            .height(40.dp) // Âêπ„ÅçÂá∫„Åó„Å®„Éê„Éº„ÅÆ„Åü„ÇÅ„ÅÆÈ´ò„Åï„ÇíÁ¢∫‰øù
    ) {
        val parentWidthPx = this.maxWidth
        // Âêπ„ÅçÂá∫„Åó„ÅÆÂπÖ„ÇíÂÆöÁæ©
        val bubbleWidth = 48.dp
        // ÈÄ≤ÊçóÁéá„Å´Âü∫„Å•„ÅÑ„Å¶Âêπ„ÅçÂá∫„Åó„ÅÆXÂ∫ßÊ®ô„ÇíË®àÁÆóÔºàDpÂçò‰Ωç„ÅßÁµ±‰∏ÄÔºâ
        val progressPositionDp = parentWidthPx * progressFraction
        // Âêπ„ÅçÂá∫„Åó„Åå„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆÁ´Ø„Åã„Çâ„ÅØ„ÅøÂá∫„Åï„Å™„ÅÑ„Çà„ÅÜ„Å´„Ç™„Éï„Çª„ÉÉ„Éà„ÇíË®àÁÆó
        val offset = (progressPositionDp - bubbleWidth / 2).coerceIn(0.dp, parentWidthPx - bubbleWidth)

        // Âêπ„ÅçÂá∫„ÅóÔºàÊú¨‰Ωì„Å®‰∏âËßíÂΩ¢„ÅÆ„Åó„Å£„ÅΩÔºâ
        Column(
            modifier = Modifier
                .width(bubbleWidth)
                .offset(x = offset)
                .zIndex(1f), // Âêπ„ÅçÂá∫„Åó„Çí„Éê„Éº„ÅÆÂâçÈù¢„Å´Ë°®Á§∫
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Âêπ„ÅçÂá∫„ÅóÊú¨‰Ωì (Card„ÅßÂΩ±„Çí„Å§„ÅëÔøΩÔøΩ)
            Card(
                shape = RoundedCornerShape(8.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color.White
                ),
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
            ) {
                Text(
                    text = progressText,
                    color = when {
                        preciseProgress >= 100 -> Color(0xFF4CAF50)
                        preciseProgress >= 75 -> MaterialTheme.colorScheme.primary
                        preciseProgress >= 50 -> Color(0xFFFF9800)
                        else -> Color(0xFFF44336)
                    },
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),
                    style = MaterialTheme.typography.labelSmall
                )
            }
            // Âêπ„ÅçÂá∫„Åó„ÅÆ„Åó„Å£„ÅΩÔºà‰∏ãÂêë„Åç„ÅÆ‰∏âËßíÂΩ¢Ôºâ
            Icon(
                imageVector = Icons.Default.ArrowDropDown,
                contentDescription = null,
                tint = when {
                    preciseProgress >= 100 -> Color(0xFF4CAF50)
                    preciseProgress >= 75 -> MaterialTheme.colorScheme.primary
                    preciseProgress >= 50 -> Color(0xFFFF9800)
                    else -> Color(0xFFF44336)
                },
                modifier = Modifier
                    .size(20.dp)
                    .offset(y = (-2).dp)
            )
        }

        // ÈÄ≤Êçó„Éê„Éº
        LinearProgressIndicator(
            progress = { progressFraction },
            modifier = Modifier
                .fillMaxWidth()
                .height(8.dp)
                .clip(RoundedCornerShape(4.dp))
                .align(Alignment.BottomCenter), // Box„ÅÆ‰∏ãÈÉ®„Å´ÈÖçÁΩÆ
            color = when {
                preciseProgress >= 100 -> Color(0xFF4CAF50)
                preciseProgress >= 75 -> MaterialTheme.colorScheme.primary
                preciseProgress >= 50 -> Color(0xFFFF9800)
                else -> Color(0xFFF44336)
            },
            trackColor = MaterialTheme.colorScheme.surfaceVariant
        )
    }
}

// „Ç∞„É´„Éº„Éó„Éò„ÉÉ„ÉÄ„Éº„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
@Composable
fun GroupHeader(
    title: String,
    count: Int,
    color: Color? = null,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        colors = CardDefaults.cardColors(
            containerColor = color?.copy(alpha = 0.1f) ?: MaterialTheme.colorScheme.primaryContainer
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp, vertical = 12.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold,
                color = color ?: MaterialTheme.colorScheme.onPrimaryContainer
            )

            Surface(
                shape = RoundedCornerShape(12.dp),
                color = color?.copy(alpha = 0.2f) ?: MaterialTheme.colorScheme.primary.copy(alpha = 0.2f)
            ) {
                Text(
                    text = "$count",
                    style = MaterialTheme.typography.bodySmall,
                    fontWeight = FontWeight.Bold,
                    color = color ?: MaterialTheme.colorScheme.primary,
                    modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)
                )
            }
        }
    }
}

// „Éí„É≥„Éà„Ç´„Éº„Éâ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
@Composable
fun TipsCard(
    onDismiss: () -> Unit,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.primaryContainer
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.Top
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp),
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        text = "üí°",
                        fontSize = 20.sp
                    )
                    Text(
                        text = "‰Ωø„ÅÑÊñπ„ÅÆ„Éí„É≥„Éà",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                }

                IconButton(
                    onClick = onDismiss,
                    modifier = Modifier.size(24.dp)
                ) {
                    Icon(
                        Icons.Default.Close,
                        contentDescription = "Èñâ„Åò„Çã",
                        tint = MaterialTheme.colorScheme.onPrimaryContainer,
                        modifier = Modifier.size(16.dp)
                    )
                }
            }

            Text(
                text = "‚Ä¢ „Ç´„Éº„Éâ„ÇíÂ∑¶Âè≥„Å´„Çπ„ÉØ„Ç§„Éó„Åó„Å¶Á¥†Êó©„Åè„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥„ÉªÁ∑®ÈõÜ\n‚Ä¢ „É°„Éã„É•„Éº„Åã„ÇâË°®Á§∫Ë®≠ÂÆö„Åß„ÇΩ„Éº„Éà„ÇÑ„Ç∞„É´„Éº„ÉóÂåñ„ÅåÂèØËÉΩ\n‚Ä¢ ÁõÆÊ®ô„Çí„Çø„ÉÉ„Éó„Åó„Å¶Ë©≥Á¥∞„ÇíÁ¢∫Ë™ç",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onPrimaryContainer
            )
        }
    }
}

// GoalListContent„ÅÆÂºïÊï∞„Å´viewModel„ÇíËøΩÂä†„Åó„ÄÅGoalCard„ÅÆÂëº„Å≥Âá∫„Åó„Çí‰øÆÊ≠£
@Composable
fun GoalListContent(
    filteredGoals: List<GoalItem>,
    isTipsHidden: Boolean,
    viewModel: GoalsViewModel, // ËøΩÂä†
    navController: NavHostController,
    sortMode: SortMode,
    setSortMode: (SortMode) -> Unit,
    showSortMenu: Boolean,
    setShowSortMenu: (Boolean) -> Unit,
    isHideCompletedGoals: Boolean,
    higherGoals: List<HigherGoal>,
    monthYearText: String,
    context: android.content.Context,
    groupMode: GroupMode = GroupMode.NONE,
    modifier: Modifier = Modifier
) {
    if (filteredGoals.isEmpty()) {
        Box(
            modifier = modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                Text(
                    text = "üéØ",
                    fontSize = 48.sp
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "No goals for this month",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Medium
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Tap the + button to add a new goal",
                    fontSize = 14.sp,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    textAlign = TextAlign.Center
                )
            }
        }
    } else {
        LazyColumn(
            modifier = modifier.fillMaxSize(),
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp) // ÔøΩÔøΩÔøΩÈöî„ÇíË™øÊï¥
        ) {
            if (!isTipsHidden) {
                item {
                    TipsCard(onDismiss = { viewModel.setTipsHidden(true) })
                }
            }

            when (groupMode) {
                GroupMode.NONE -> {
                    items(filteredGoals, key = { it.id.toString() }) { goalItem ->
                        val higherGoal = higherGoals.find { it.id == goalItem.higherGoalId }
                        GoalCard(
                            goalItem = goalItem,
                            higherGoal = higherGoal,
                            navController = navController,
                            viewModel = viewModel, // viewModel„ÇíÊ∏°„Åô
                            modifier = Modifier.fillMaxWidth()
                        )
                    }
                }
                GroupMode.HIGHER_GOAL -> {
                    val groupedGoals = filteredGoals.groupBy { goal ->
                        higherGoals.find { it.id == goal.higherGoalId }
                    }

                    val higherGoalGroups = groupedGoals.filterKeys { it != null }.toList().sortedBy { it.first?.createdAt }
                    val noHigherGoalGroup = groupedGoals[null]

                    higherGoalGroups.forEach { (higherGoal, goals) ->
                        item {
                            GroupHeader(
                                title = higherGoal?.title ?: "‰∏ä‰ΩçÁõÆÊ®ô„Å™„Åó",
                                count = goals.size,
                                color = higherGoal?.color?.let { Color(android.graphics.Color.parseColor(it)) }
                            )
                        }
                        items(goals, key = { it.id.toString() }) { goalItem ->
                            GoalCard(
                                goalItem = goalItem,
                                higherGoal = higherGoal,
                                navController = navController,
                                viewModel = viewModel,
                                modifier = Modifier.fillMaxWidth().padding(start = 8.dp)
                            )
                        }
                    }

                    noHigherGoalGroup?.let { goals ->
                        if (goals.isNotEmpty()) {
                            item {
                                GroupHeader(title = "‰∏ä‰ΩçÁõÆÊ®ô„Å™„Åó", count = goals.size)
                            }
                            items(goals, key = { it.id.toString() }) { goalItem ->
                                GoalCard(
                                    goalItem = goalItem,
                                    higherGoal = null,
                                    navController = navController,
                                    viewModel = viewModel,
                                    modifier = Modifier.fillMaxWidth().padding(start = 8.dp)
                                )
                            }
                        }
                    }
                }
                GroupMode.KEY_GOAL -> {
                    val keyGoals = filteredGoals.filter { it.isKeyGoal }
                    val normalGoals = filteredGoals.filter { !it.isKeyGoal }

                    if (keyGoals.isNotEmpty()) {
                        item {
                            GroupHeader(
                                title = "üóùÔ∏è „Ç≠„ÉºÁõÆÊ®ô",
                                count = keyGoals.size,
                                color = Color(0xFFFFD700)
                            )
                        }
                        items(keyGoals, key = { it.id.toString() }) { goalItem ->
                            val higherGoal = higherGoals.find { it.id == goalItem.higherGoalId }
                            GoalCard(
                                goalItem = goalItem,
                                higherGoal = higherGoal,
                                navController = navController,
                                viewModel = viewModel,
                                modifier = Modifier.fillMaxWidth().padding(start = 8.dp)
                            )
                        }
                    }
                    if (normalGoals.isNotEmpty()) {
                        item {
                            GroupHeader(
                                title = "üìã ÈÄöÂ∏∏ÁõÆÊ®ô",
                                count = normalGoals.size
                            )
                        }
                        items(normalGoals, key = { it.id.toString() }) { goalItem ->
                            val higherGoal = higherGoals.find { it.id == goalItem.higherGoalId }
                            GoalCard(
                                goalItem = goalItem,
                                higherGoal = higherGoal,
                                navController = navController,
                                viewModel = viewModel,
                                modifier = Modifier.fillMaxWidth().padding(start = 8.dp)
                            )
                        }
                    }
                }
            }
        }
    }
}

// ÈÄ≤ÊçóÁéá„ÇíÂ∞èÊï∞ÁÇπ‰∏ÄÊ°Å„Åæ„ÅßÁπ∞„ÇäÔøΩÔøΩÔøΩ„Åå„Çä„ÅßË°®Á§∫„Åô„Çã„Éò„É´„Éë„ÉºÈñ¢Êï∞
private fun formatProgressPercentage(progressPercent: Double): String {
    val rounded = kotlin.math.ceil(progressPercent * 10) / 10 // Â∞èÊï∞ÁÇπÁ¨¨‰∫å‰Ωç‰ª•‰∏ã„ÇíÁπ∞„Çä‰∏ä„Åå„Çä
    return String.format("%.1f", rounded)
}
