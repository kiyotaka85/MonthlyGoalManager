package com.ablomm.monthlygoalmanager

import android.os.Build
import androidx.annotation.RequiresApi
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.TrendingUp
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material.icons.filled.Star
import androidx.compose.material.icons.filled.ExpandLess
import androidx.compose.material.icons.filled.ExpandMore
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.CheckCircle
import androidx.compose.material.icons.filled.History
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Check
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.navigation.NavHostController
import java.time.Instant
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter
import java.util.*

@OptIn(ExperimentalMaterial3Api::class)
@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun GoalDetailScreen(
    goalId: UUID,
    viewModel: GoalsViewModel,
    navController: NavHostController
) {
    var goalItem by remember { mutableStateOf<GoalItem?>(null) }
    var isLoading by remember { mutableStateOf(true) }

    // ÂêÑ„Çª„ÇØ„Ç∑„Éß„É≥„ÅÆÈñãÈñâÁä∂ÊÖã„ÇíÁÆ°ÁêÜ
    var isBasicInfoExpanded by remember { mutableStateOf(false) }
    var isProgressExpanded by remember { mutableStateOf(false) }
    var isActionStepsExpanded by remember { mutableStateOf(false) }
    var isCheckInHistoryExpanded by remember { mutableStateOf(false) }

    val checkInsState = viewModel.getCheckInsForGoal(goalId).collectAsState(initial = emptyList())
    val actionStepsState = viewModel.getActionStepsForGoal(goalId).collectAsState(initial = emptyList())
    val higherGoalsState = viewModel.higherGoalList.collectAsState(initial = emptyList())

    // „ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥Áî®„Ç∑„Éº„Éà
    var showCheckInSheet by remember { mutableStateOf(false) }
    val sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)

    LaunchedEffect(goalId) {
        goalItem = viewModel.getGoalById(goalId)
        isLoading = false
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("ÁõÆÊ®ôË©≥Á¥∞") },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Êàª„Çã")
                    }
                },
                actions = {
                    IconButton(
                        onClick = { navController.navigate("goalEdit/$goalId") }
                    ) {
                        Icon(Icons.Default.Edit, contentDescription = "Á∑®ÈõÜ")
                    }
                }
            )
        }
    ) { paddingValues ->
        if (isLoading) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                CircularProgressIndicator()
            }
        } else if (goalItem != null) {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues),
                contentPadding = PaddingValues(16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                // „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥
                item {
                    GoalActionButtons(
                        goalId = goalId,
                        navController = navController,
                        onCheckIn = { showCheckInSheet = true }
                    )
                }

                // Âü∫Êú¨ÊÉÖÂ†±„Çª„ÇØ„Ç∑„Éß„É≥
                item {
                    ExpandableSection(
                        title = "Âü∫Êú¨ÊÉÖÂ†±",
                        icon = Icons.Default.Info,
                        isExpanded = isBasicInfoExpanded,
                        onToggle = { isBasicInfoExpanded = !isBasicInfoExpanded }
                    ) {
                        GoalBasicInfoContent(
                            goal = goalItem!!,
                            higherGoals = higherGoalsState.value
                        )
                    }
                }

                // ÈÄ≤Êçó„Çª„ÇØ„Ç∑„Éß„É≥
                item {
                    ExpandableSection(
                        title = "ÈÄ≤ÊçóÁä∂Ê≥Å",
                        icon = Icons.AutoMirrored.Filled.TrendingUp,
                        isExpanded = isProgressExpanded,
                        onToggle = { isProgressExpanded = !isProgressExpanded }
                    ) {
                        GoalProgressContent(
                            goal = goalItem!!,
                            checkIns = checkInsState.value
                        )
                    }
                }

                // „Ç¢„ÇØ„Ç∑„Éß„É≥„Çπ„ÉÜ„ÉÉ„Éó„Çª„ÇØ„Ç∑„Éß„É≥ÔºàÂ∏∏„Å´Ë°®Á§∫Ôºâ
                item {
                    ExpandableSection(
                        title = "„Ç¢„ÇØ„Ç∑„Éß„É≥„Çπ„ÉÜ„ÉÉ„Éó",
                        icon = Icons.Default.CheckCircle,
                        isExpanded = isActionStepsExpanded,
                        onToggle = { isActionStepsExpanded = !isActionStepsExpanded }
                    ) {
                        GoalActionStepsContent(
                            goal = goalItem!!,
                            actionSteps = actionStepsState.value,
                            onAdd = { viewModel.addActionStep(it) },
                            onUpdate = { viewModel.updateActionStep(it) },
                            onDelete = { viewModel.deleteActionStep(it) }
                        )
                    }
                }

                // „ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥Â±•Ê≠¥„Çª„ÇØ„Ç∑„Éß„É≥
                item {
                    ExpandableSection(
                        title = "„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥Â±•Ê≠¥",
                        icon = Icons.Default.History,
                        isExpanded = isCheckInHistoryExpanded,
                        onToggle = { isCheckInHistoryExpanded = !isCheckInHistoryExpanded }
                    ) {
                        CheckInHistoryContent(checkIns = checkInsState.value)
                    }
                }

                // ÂâäÈô§„Çª„ÇØ„Ç∑„Éß„É≥
                item {
                    GoalDeleteSection(goal = goalItem!!, viewModel = viewModel, navController = navController)
                }
            }
        }
    }

    if (showCheckInSheet && goalItem != null) {
        ModalBottomSheet(
            onDismissRequest = { showCheckInSheet = false },
            sheetState = sheetState
        ) {
            CheckInSheet(
                goalId = goalItem!!.id,
                viewModel = viewModel,
                onClose = { showCheckInSheet = false }
            )
        }
    }
}

@Composable
fun GoalBasicInfoContent(
    goal: GoalItem,
    higherGoals: List<HigherGoal>
) {
    Column(
        modifier = Modifier.padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        Text(
            text = goal.title,
            style = MaterialTheme.typography.headlineSmall,
            fontWeight = FontWeight.Bold
        )

        // Êï∞ÂÄ§ÁõÆÊ®ô„ÅÆË©≥Á¥∞ÔºàÂ∏∏„Å´Ë°®Á§∫Ôºâ
        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text("ÁõÆÊ®ôÂÄ§:", fontWeight = FontWeight.Medium)
            Text("${goal.targetNumericValue} ${goal.unit}")
        }

        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text("ÁèæÂú®ÂÄ§:", fontWeight = FontWeight.Medium)
            Text("${goal.currentNumericValue} ${goal.unit}")
        }

        // „Ç≠„ÉºÁõÆÊ®ô
        if (goal.isKeyGoal) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text("üóùÔ∏è", fontSize = 20.sp)
                Text("„Ç≠„ÉºÁõÆÊ®ô", fontWeight = FontWeight.Bold, color = MaterialTheme.colorScheme.primary)
            }
        }

        // ‰∏ä‰ΩçÁõÆÊ®ô
        val higherGoal = higherGoals.find { it.id == goal.higherGoalId }
        if (higherGoal != null) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text("‰∏ä‰ΩçÁõÆÊ®ô:", fontWeight = FontWeight.Medium)
                Text(higherGoal.title)
            }
        }

        // „ÅîË§íÁæé
        if (!goal.celebration.isNullOrBlank()) {
            Column(
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text("üéÅ „ÅîË§íÁæé:", fontWeight = FontWeight.Medium)
                Text(
                    text = goal.celebration,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }

        // Ë©≥Á¥∞Ë™¨Êòé
        if (!goal.detailedDescription.isNullOrBlank()) {
            Column(
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text("Ë©≥Á¥∞Ë™¨Êòé:", fontWeight = FontWeight.Medium)
                Text(
                    text = goal.detailedDescription,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }
}

@Composable
fun GoalProgressContent(
    goal: GoalItem,
    checkIns: List<CheckInItem>
) {
    Column(
        modifier = Modifier.padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        // Premium bubble progress indicator
        GoalProgressIndicatorWithBubble(goal = goal)

        if (goal.isCompleted) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Icon(
                    Icons.Default.Star,
                    contentDescription = null,
                    tint = Color(0xFFFFD700)
                )
                Text(
                    text = "ÂÆå‰∫ÜÊ∏à„Åø",
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF4CAF50)
                )
            }
        }

        // Áµ±Ë®àÊÉÖÂ†±
        if (checkIns.isNotEmpty()) {
            HorizontalDivider()

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Text(
                        text = "${checkIns.size}",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥ÂõûÊï∞",
                        style = MaterialTheme.typography.bodySmall
                    )
                }

                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    val avgProgress = checkIns.map { it.progressPercent }.average().toInt()
                    Text(
                        text = "${avgProgress}%",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "Âπ≥ÂùáÈÄ≤Êçó",
                        style = MaterialTheme.typography.bodySmall
                    )
                }
            }
        }
    }
}

@Composable
fun GoalActionButtons(
    goalId: UUID,
    navController: NavHostController,
    onCheckIn: () -> Unit
) {
    Column(
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        Button(
            onClick = onCheckIn,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥")
        }

//        OutlinedButton(
//            onClick = { navController.navigate("goalEdit/$goalId") },
//            modifier = Modifier.fillMaxWidth()
//        ) {
//            Text("Á∑®ÈõÜ")
//        }
    }
}

@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun CheckInHistoryContent(checkIns: List<CheckInItem>) {
    Column(
        modifier = Modifier.padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        checkIns.take(5).forEach { checkIn ->
            val dateTime = LocalDateTime.ofInstant(
                Instant.ofEpochMilli(checkIn.checkInDate),
                ZoneId.systemDefault()
            )
            val formattedDate = dateTime.format(DateTimeFormatter.ofPattern("MM/dd HH:mm"))

            Card(
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant
                )
            ) {
                Column(
                    modifier = Modifier.padding(12.dp)
                ) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text(
                            text = "${formatProgressPercentageFromInt(checkIn.progressPercent)}%",
                            fontWeight = FontWeight.Bold
                        )
                        Text(
                            text = formattedDate,
                            style = MaterialTheme.typography.bodySmall,
                            color = Color.Gray
                        )
                    }

                    if (checkIn.comment.isNotBlank()) {
                        Text(
                            text = checkIn.comment,
                            style = MaterialTheme.typography.bodySmall,
                            modifier = Modifier.padding(top = 4.dp)
                        )
                    }
                }
            }
        }

        if (checkIns.size > 5) {
            Text(
                text = "‰ªñ ${checkIns.size - 5} ‰ª∂„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

@Composable
fun GoalActionStepsContent(
    goal: GoalItem,
    actionSteps: List<ActionStep>,
    onAdd: (ActionStep) -> Unit,
    onUpdate: (ActionStep) -> Unit,
    onDelete: (ActionStep) -> Unit
) {
    Column(
        modifier = Modifier.padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        actionSteps.forEach { step ->
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(step.title)
                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                    val toggled = step.copy(isCompleted = !step.isCompleted)
                    TextButton(onClick = { onUpdate(toggled) }) {
                        Text(if (step.isCompleted) "Êú™ÂÆå‰∫Ü„Å´„Åô„Çã" else "ÂÆå‰∫Ü")
                    }
                    TextButton(onClick = { onDelete(step) }) {
                        Text("ÂâäÈô§")
                    }
                }
            }
        }
        // ËøΩÂä†„ÅØÁ∞°ÊòìÁöÑ„Å´„ÉÄ„Éü„ÉºËøΩÂä†„Éú„Çø„É≥
        OutlinedButton(onClick = {
            onAdd(
                ActionStep(
                    goalId = goal.id,
                    title = "New step",
                    order = (actionSteps.maxOfOrNull { it.order } ?: 0) + 1
                )
            )
        }) {
            Text("„Çπ„ÉÜ„ÉÉ„Éó„ÇíËøΩÂä†")
        }
    }
}

@Composable
fun GoalDeleteSection(
    goal: GoalItem,
    viewModel: GoalsViewModel,
    navController: NavHostController
) {
    var showConfirm by remember { mutableStateOf(false) }
    Card(
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text("ÁõÆÊ®ô„ÅÆÂâäÈô§", fontWeight = FontWeight.Bold, color = MaterialTheme.colorScheme.onErrorContainer)
            Spacer(Modifier.height(8.dp))
            OutlinedButton(onClick = { showConfirm = true }) { Text("ÂâäÈô§„Åô„Çã") }
        }
    }
    if (showConfirm) {
        AlertDialog(
            onDismissRequest = { showConfirm = false },
            title = { Text("ÂâäÈô§„ÅÆÁ¢∫Ë™ç") },
            text = { Text("„Åì„ÅÆÁõÆÊ®ô„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü") },
            confirmButton = {
                TextButton(onClick = {
                    viewModel.deleteGoalItem(goal)
                    showConfirm = false
                    navController.popBackStack()
                }) { Text("ÂâäÈô§") }
            },
            dismissButton = { TextButton(onClick = { showConfirm = false }) { Text("„Ç≠„É£„É≥„Çª„É´") } }
        )
    }
}

// Êï¥Êï∞„ÅÆÈÄ≤ÊçóÁéá„ÇíÂ∞èÊï∞ÁÇπ‰∏ÄÊ°Å„Åæ„ÅßÁπ∞„Çä‰∏ä„Åå„Çä„ÅßË°®Á§∫„Åô„Çã„Éò„É´„Éë„ÉºÈñ¢Êï∞
// Ê≥®ÊÑèÔºö„Åì„ÅÆÈñ¢Êï∞„ÅØÊï¥Êï∞ÂÄ§„Åó„ÅãÂèó„ÅëÂèñ„Çâ„Å™„ÅÑ„Åü„ÇÅ„ÄÅÁ≤æÂØÜ„Å™ÂÄ§„ÅØÂ§±„Çè„Çå„Åæ„Åô
// ÂèØËÉΩ„Å™Â†¥Âêà„ÅØ„ÄÅÂÖÉ„ÅÆÁõÆÊ®ô„Éá„Éº„Çø„Åã„ÇâÁ≤æÂØÜË®àÁÆó„ÇíË°å„ÅÜ„Åì„Å®„ÇíÊé®Â•®
private fun formatProgressPercentageFromInt(progressPercent: Int): String {
    val progressDouble = progressPercent.toDouble()
    return java.lang.String.format(java.util.Locale.getDefault(), "%.1f", progressDouble)
}

@Composable
fun ExpandableSection(
    title: String,
    icon: ImageVector,
    isExpanded: Boolean,
    onToggle: () -> Unit,
    content: @Composable () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier
                .clickable { onToggle() }
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Icon(icon, contentDescription = null)
                    Text(
                        text = title,
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                }

                Icon(
                    imageVector = if (isExpanded) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                    contentDescription = null
                )
            }

            if (isExpanded) {
                content()
            }
        }
    }
}
